// Script de inicializa√ß√£o do MongoDB para DFcom
print('üöÄ Iniciando configura√ß√£o do banco dfcom_products...');

// Usar o banco dfcom_products
db = db.getSiblingDB('dfcom_products');

// Criar usu√°rio para aplica√ß√£o
db.createUser({
  user: 'dfcom_user',
  pwd: 'dfcom_password',
  roles: [
    {
      role: 'readWrite',
      db: 'dfcom_products'
    }
  ]
});

// Criar cole√ß√µes com valida√ß√£o
db.createCollection('products', {
  validator: {
    $jsonSchema: {
      bsonType: 'object',
      required: ['name', 'description', 'price', 'category'],
      properties: {
        name: {
          bsonType: 'string',
          description: 'Nome do produto √© obrigat√≥rio'
        },
        description: {
          bsonType: 'string',
          description: 'Descri√ß√£o do produto √© obrigat√≥ria'
        },
        price: {
          bsonType: 'number',
          minimum: 0,
          description: 'Pre√ßo deve ser um n√∫mero positivo'
        },
        category: {
          bsonType: 'string',
          enum: ['eletr√¥nicos', 'roupas', 'casa', 'esportes', 'livros', 'sa√∫de', 'beleza', 'brinquedos', 'alimenta√ß√£o', 'outros'],
          description: 'Categoria deve ser uma das op√ß√µes v√°lidas'
        }
      }
    }
  }
});

db.createCollection('reviews', {
  validator: {
    $jsonSchema: {
      bsonType: 'object',
      required: ['productId', 'author', 'rating', 'comment'],
      properties: {
        productId: {
          bsonType: 'objectId',
          description: 'ID do produto √© obrigat√≥rio'
        },
        author: {
          bsonType: 'string',
          description: 'Autor da avalia√ß√£o √© obrigat√≥rio'
        },
        rating: {
          bsonType: 'int',
          minimum: 1,
          maximum: 5,
          description: 'Avalia√ß√£o deve ser entre 1 e 5'
        },
        comment: {
          bsonType: 'string',
          description: 'Coment√°rio √© obrigat√≥rio'
        }
      }
    }
  }
});

// Criar √≠ndices para performance
db.products.createIndex({ name: 'text', description: 'text' });
db.products.createIndex({ category: 1 });
db.products.createIndex({ createdAt: -1 });

db.reviews.createIndex({ productId: 1, createdAt: -1 });
db.reviews.createIndex({ rating: 1 });
db.reviews.createIndex({ productId: 1, rating: -1 });

// Inserir dados de exemplo
print('üì¶ Inserindo produtos de exemplo...');

const sampleProducts = [
  {
    name: 'iPhone 15 Pro',
    description: 'Smartphone Apple com c√¢mera avan√ßada e chip A17 Pro',
    price: 7999.99,
    category: 'eletr√¥nicos',
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    name: 'Camiseta Nike Dri-FIT',
    description: 'Camiseta esportiva com tecnologia de absor√ß√£o de suor',
    price: 89.90,
    category: 'roupas',
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    name: 'Mesa de Escrit√≥rio',
    description: 'Mesa de madeira para escrit√≥rio home office',
    price: 299.99,
    category: 'casa',
    createdAt: new Date(),
    updatedAt: new Date()
  }
];

const insertedProducts = db.products.insertMany(sampleProducts);
print(`‚úÖ ${insertedProducts.insertedIds.length} produtos inseridos`);

// Inserir avalia√ß√µes de exemplo
print('‚≠ê Inserindo avalia√ß√µes de exemplo...');

const productIds = Object.values(insertedProducts.insertedIds);

const sampleReviews = [
  {
    productId: productIds[0],
    author: 'Jo√£o Silva',
    rating: 5,
    comment: 'Excelente smartphone! C√¢mera incr√≠vel e performance excepcional.',
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    productId: productIds[0],
    author: 'Maria Santos',
    rating: 4,
    comment: 'Muito bom, mas o pre√ßo √© um pouco salgado.',
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    productId: productIds[1],
    author: 'Pedro Costa',
    rating: 5,
    comment: 'Camiseta de √≥tima qualidade, muito confort√°vel para exerc√≠cios.',
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    productId: productIds[2],
    author: 'Ana Lima',
    rating: 4,
    comment: 'Mesa bonita e funcional, montagem um pouco trabalhosa.',
    createdAt: new Date(),
    updatedAt: new Date()
  }
];

const insertedReviews = db.reviews.insertMany(sampleReviews);
print(`‚úÖ ${insertedReviews.insertedIds.length} avalia√ß√µes inseridas`);

print('üéâ Configura√ß√£o do MongoDB conclu√≠da com sucesso!');
print('');
print('üë§ Usu√°rio criado: dfcom_user');
print('üîë Senha: dfcom_password');
print('üìä Base de dados: dfcom_products');
print(`üì¶ Produtos de exemplo: ${productIds.length}`);
print(`‚≠ê Avalia√ß√µes de exemplo: ${insertedReviews.insertedIds.length}`);

const productSchema = new mongoose.Schema({
  name: { type: String, required: true, maxlength: 100 },
  description: { type: String, required: true, maxlength: 1000 },
  price: { type: Number, required: true, min: 0 },
  category: { type: String, enum: ['eletr√¥nicos', 'roupas', 'casa', 'esportes', 'livros', 'sa√∫de', 'beleza', 'brinquedos', 'alimenta√ß√£o', 'outros'] }
});

// Virtual para reviews relacionadas
productSchema.virtual('reviews', {
  ref: 'Review',
  localField: '_id',
  foreignField: 'productId'
});

const reviewSchema = new mongoose.Schema({
  productId: { type: ObjectId, ref: 'Product', required: true },
  author: { type: String, required: true, maxlength: 100 },
  rating: { type: Number, required: true, min: 1, max: 5 },
  comment: { type: String, required: true, maxlength: 500 }
}); 