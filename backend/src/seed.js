import mongoose from 'mongoose';
import Product from './models/Product.js';
import Review from './models/Review.js';
import { config } from 'dotenv';

config();

// Dados de exemplo
const sampleProducts = [
  {
    name: 'Smartphone Samsung Galaxy S24',
    description: 'Celular Android com 256GB de armazenamento, c√¢mera tripla de 50MP com IA e tela Dynamic AMOLED de 6.2 polegadas. Design premium com acabamento em vidro e alum√≠nio. Processador Snapdragon 8 Gen 3 para m√°xima performance.',
    price: 2499.99,
    category: 'eletr√¥nicos'
  },
  {
    name: 'Notebook Dell Inspiron 15 3000',
    description: 'Laptop ideal para trabalho e estudos com processador Intel Core i7 11¬™ gera√ß√£o, 16GB de RAM DDR4, SSD de 512GB NVMe e placa de v√≠deo Intel Iris Xe. Tela Full HD de 15.6 polegadas antirreflexo.',
    price: 3299.90,
    category: 'eletr√¥nicos'
  },
  {
    name: 'T√™nis Nike Air Max 270',
    description: 'T√™nis esportivo unissex com tecnologia Air Max no calcanhar para m√°ximo conforto. Cabedal em mesh respir√°vel e solado em borracha antiderrapante. Ideal para corridas e uso casual.',
    price: 549.99,
    category: 'esportes'
  },
  {
    name: 'Cadeira Gamer ThunderX3 EC3',
    description: 'Cadeira gamer ergon√¥mica com apoio lombar ajust√°vel, bra√ßos 4D e inclina√ß√£o at√© 180¬∞. Revestimento em couro sint√©tico de alta qualidade com costuras refor√ßadas. Suporta at√© 150kg.',
    price: 899.99,
    category: 'casa'
  },
  {
    name: 'Fone Bluetooth Sony WH-1000XM5',
    description: 'Fone de ouvido over-ear com cancelamento de ru√≠do l√≠der da ind√∫stria. Bateria de at√© 30 horas, carregamento r√°pido e qualidade de √°udio High-Resolution. Ideal para trabalho e viagens.',
    price: 1699.99,
    category: 'eletr√¥nicos'
  },
  {
    name: 'Livro "Clean Code" - Robert Martin',
    description: 'Guia essencial para desenvolvedores sobre como escrever c√≥digo limpo e eficiente. T√©cnicas, princ√≠pios e pr√°ticas para melhorar a qualidade do software. Inclui exemplos pr√°ticos e casos reais.',
    price: 89.90,
    category: 'livros'
  },
  {
    name: 'Monitor LG UltraWide 29" 4K',
    description: 'Monitor ultrawide de 29 polegadas com resolu√ß√£o 4K UHD, tecnologia IPS para cores precisas e HDR10 para melhor contraste. Ideal para produtividade e entertainment. Conex√µes USB-C e HDMI.',
    price: 1999.99,
    category: 'eletr√¥nicos'
  },
  {
    name: 'Camiseta Adidas Originals',
    description: 'Camiseta casual da linha Originals com logo cl√°ssico bordado. Tecido 100% algod√£o premium, corte regular e dispon√≠vel em v√°rias cores. Pe√ßa atemporal para o guarda-roupa.',
    price: 129.99,
    category: 'roupas'
  },
  {
    name: 'Panela de Press√£o El√©trica Mondial',
    description: 'Panela de press√£o el√©trica de 5 litros com 12 fun√ß√µes pr√©-programadas. Timer digital, v√°lvula de seguran√ßa e cuba antiaderente. Ideal para preparar refei√ß√µes completas rapidamente.',
    price: 299.99,
    category: 'casa'
  },
  {
    name: 'Bicicleta Caloi Explorer Sport',
    description: 'Bicicleta mountain bike aro 29 com quadro de alum√≠nio, 21 marchas Shimano e freios a disco mec√¢nicos. Suspens√£o dianteira e pneus resistentes para trilhas e cidade.',
    price: 1899.99,
    category: 'esportes'
  }
];

// Fun√ß√£o para conectar ao banco
async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB');
  } catch (error) {
    console.error('‚ùå Erro ao conectar ao MongoDB:', error.message);
    process.exit(1);
  }
}

// Nomes de autores para reviews aleat√≥rias
const reviewAuthors = [
  'Ana Silva', 'Jo√£o Santos', 'Maria Oliveira', 'Pedro Costa', 'Carla Souza',
  'Lucas Ferreira', 'Juliana Lima', 'Rafael Alves', 'Fernanda Rocha', 'Bruno Martins',
  'Camila Pereira', 'Diego Ribeiro', 'Larissa Cardoso', 'Thiago Nascimento', 'Beatriz Gomes',
  'Gabriel Barbosa', 'Nat√°lia Dias', 'Rodrigo Mendes', 'Isabela Castro', 'Felipe Ara√∫jo',
  'Amanda Torres', 'Gustavo Ramos', 'Priscila Moreira', 'Vin√≠cius Correia', 'Let√≠cia Freitas'
];

// Coment√°rios base para reviews aleat√≥rias
const reviewComments = {
  5: [
    'Produto excelente! Superou minhas expectativas.',
    'Qualidade incr√≠vel, recomendo muito!',
    'Perfeito! Chegou r√°pido e bem embalado.',
    'Melhor compra que j√° fiz, produto top!',
    'Qualidade excepcional, vale cada centavo.',
    'Produto fant√°stico, muito satisfeito!',
    'Excelente custo-benef√≠cio, recomendo!',
    'Produto de alta qualidade, adorei!'
  ],
  4: [
    'Muito bom produto, recomendo.',
    'Boa qualidade, atendeu √†s expectativas.',
    'Produto bom, pequenos detalhes a melhorar.',
    'Gostei bastante, boa compra.',
    'Qualidade boa, entrega r√°pida.',
    'Produto satisfat√≥rio, vale a pena.',
    'Bom custo-benef√≠cio, recomendo.',
    'Produto de qualidade, gostei.'
  ],
  3: [
    'Produto razo√°vel, dentro do esperado.',
    'Ok, nada excepcional mas funciona bem.',
    'Produto mediano, serve para o prop√≥sito.',
    'Qualidade ok, pre√ßo justo.',
    'Produto comum, sem grandes surpresas.',
    'Atende ao b√°sico, qualidade regular.',
    'Produto simples mas funcional.',
    'Razo√°vel, poderia ser melhor.'
  ],
  2: [
    'Produto com alguns problemas.',
    'Qualidade abaixo do esperado.',
    'Produto ok, mas tem defeitos.',
    'N√£o gostei muito, qualidade ruim.',
    'Produto com falhas, n√£o recomendo.',
    'Qualidade question√°vel, decepcionante.',
    'Produto fraco, esperava mais.',
    'N√£o vale o pre√ßo, qualidade baixa.'
  ],
  1: [
    'Produto muito ruim, n√£o recomendo.',
    'P√©ssima qualidade, dinheiro jogado fora.',
    'Produto defeituoso, muito insatisfeito.',
    'Horr√≠vel, n√£o comprem este produto.',
    'Qualidade p√©ssima, produto in√∫til.',
    'Muito ruim, total decep√ß√£o.',
    'Produto de baix√≠ssima qualidade.',
    'N√£o funciona, produto terr√≠vel.'
  ]
};

// Fun√ß√£o para gerar review aleat√≥ria
function generateRandomReview(productId) {
  const rating = Math.floor(Math.random() * 5) + 1; // 1 a 5
  const author = reviewAuthors[Math.floor(Math.random() * reviewAuthors.length)];
  const comments = reviewComments[rating];
  const comment = comments[Math.floor(Math.random() * comments.length)];

  // Data aleat√≥ria nos √∫ltimos 6 meses
  const now = new Date();
  const sixMonthsAgo = new Date(now.getTime() - (6 * 30 * 24 * 60 * 60 * 1000));
  const randomDate = new Date(sixMonthsAgo.getTime() + Math.random() * (now.getTime() - sixMonthsAgo.getTime()));

  return {
    productId,
    author,
    rating,
    comment,
    createdAt: randomDate
  };
}

// Fun√ß√£o para limpar e inserir dados
async function seedDatabase() {
  try {
    console.log('üóëÔ∏è  Limpando dados existentes...');
    await Product.deleteMany({});
    await Review.deleteMany({});

    console.log('üå± Inserindo produtos de exemplo...');
    const products = await Product.insertMany(sampleProducts);

    console.log('‚≠ê Gerando reviews aleat√≥rias...');
    const allReviews = [];

    for (const product of products) {
      // N√∫mero aleat√≥rio de reviews entre 0 e 24
      const numReviews = Math.floor(Math.random() * 25);

      console.log(`   üìù Gerando ${numReviews} reviews para "${product.name}"`);

      for (let i = 0; i < numReviews; i++) {
        const review = generateRandomReview(product._id);
        allReviews.push(review);
      }
    }

    if (allReviews.length > 0) {
      await Review.insertMany(allReviews);
      console.log(`‚úÖ ${allReviews.length} reviews inseridas com sucesso!`);
    }

    console.log(`‚úÖ ${products.length} produtos inseridos com sucesso!`);
    console.log('\nüìã Produtos criados:');

    for (const product of products) {
      const reviewCount = await Review.countDocuments({ productId: product._id });
      console.log(`${products.indexOf(product) + 1}. ${product.name} - R$ ${product.price.toFixed(2)} (${reviewCount} reviews)`);
    }

  } catch (error) {
    console.error('‚ùå Erro ao inserir dados:', error.message);
  }
}

// Fun√ß√£o principal
async function main() {
  console.log('üöÄ Iniciando seed do banco de dados...\n');

  await connectDB();
  await seedDatabase();

  console.log('\nüéâ Seed conclu√≠do com sucesso!');
  console.log('üí° Agora voc√™ pode testar a integra√ß√£o frontend-backend\n');

  await mongoose.connection.close();
  console.log('üîå Conex√£o com MongoDB fechada');
  process.exit(0);
}

// Executar se chamado diretamente
if (process.argv[1].endsWith('seed.js')) {
  main().catch(error => {
    console.error('‚ùå Erro fatal:', error);
    process.exit(1);
  });
}

export { sampleProducts, seedDatabase };
